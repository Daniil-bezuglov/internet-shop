from docx import Document
from docx.shared import Pt, Cm, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.section import WD_SECTION
from docx.shared import RGBColor

def create_formatted_docx():
    # Создаем новый документ
    doc = Document()
    
    # Настраиваем поля страницы
    sections = doc.sections
    for section in sections:
        section.top_margin = Cm(2)
        section.bottom_margin = Cm(2)
        section.left_margin = Cm(3)
        section.right_margin = Cm(1)

    # Добавляем заголовок
    title = doc.add_heading('МЕТОДИЧЕСКИЕ УКАЗАНИЯ', level=0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Добавляем подзаголовок
    subtitle = doc.add_paragraph()
    subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
    subtitle.add_run('по выполнению и оформлению курсового проекта\nпо МДК 09.01 «Проектирование и разработка веб-приложений»\nПМ.09 ПРОЕКТИРОВАНИЕ, РАЗРАБОТКА И ОПТИМИЗАЦИЯ ВЕБ-ПРИЛОЖЕНИЙ\nпо специальности СПО\n09.02.07 «Информационные системы и программирование»')

    # Добавляем основной текст
    doc.add_paragraph('Методические рекомендации предназначены для студентов специальности 09.02.07 Информационные системы и программирование, разработаны на основе Государственных требований к минимуму содержания и уровню подготовки выпускников по специальности 09.02.07 и содержат цели и темы курсового проектирования, требования к содержанию и оформлению курсового проекта.')

    # Добавляем раздел "СОДЕРЖАНИЕ"
    doc.add_heading('СОДЕРЖАНИЕ', level=1)
    
    # Добавляем основные разделы
    sections = [
        'Предисловие',
        'Тематика курсовых проектов',
        'Требования к содержанию и объему курсового проекта',
        'Требования к оформлению пояснительной записки',
        'Структура библиографического описания',
        'Примеры библиографических описаний',
        'Титульный лист'
    ]
    
    for section in sections:
        doc.add_paragraph(section, style='List Bullet')

    # Сохраняем документ
    doc.save('методические_указания_новый.docx')

def create_project_docx():
    doc = Document()
    # Настройка полей
    for section in doc.sections:
        section.top_margin = Cm(2)
        section.bottom_margin = Cm(2)
        section.left_margin = Cm(3)
        section.right_margin = Cm(1)

    # Титульный лист
    doc.add_paragraph('МИНИСТЕРСТВО ОБРАЗОВАНИЯ МОСКОВСКОЙ ОБЛАСТИ', style='Title').alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph('ГБПОУ МО "Ногинский колледж"', style='Title').alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph('\nКурсовой проект\nпо МДК.09.01 Проектирование и разработка веб-приложений\nПМ.09 Проектирование, разработка и оптимизация веб-приложений', style='Title').alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph('Тема: Интернет-магазин', style='Title').alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph('\n\nРазработчик: студент группы 3ИСПР\nБезуглов Даниил\n\nРуководитель проекта: преподаватель Степан Олегович\n\nНогинск, 2024 г.', style='Title').alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_page_break()

    # Содержание с номерами страниц
    doc.add_heading('СОДЕРЖАНИЕ', level=1)
    contents = [
        ('Введение', 3),
        ('1. Описание проекта', 4),
        ('2. Архитектура и структура проекта', 5),
        ('3. Используемые технологии', 6),
        ('4. Основные функции', 7),
        ('5. Установка и запуск', 8),
        ('6. Заключение', 9),
        ('7. Список использованных источников', 10),
        ('8. Теоретическая часть', 11),
        ('9. Тестирование функциональности интернет-магазина', 12),
        ('10. Примеры кода', 13),
        ('11. Структура базы данных', 14),
        ('Приложения', 15),
    ]
    for i, (item, page) in enumerate(contents, 1):
        doc.add_paragraph(f'{i}. {item} .......................... {page}', style='List Number')
    doc.add_page_break()

    # Введение
    doc.add_heading('Введение', level=1)
    doc.add_paragraph(
        'Курсовой проект посвящён разработке серверной части веб-приложения "Интернет-магазин". '
        'Целью работы является закрепление знаний и развитие практических навыков по созданию современных веб-приложений с использованием фреймворка Django.'
    )
    doc.add_paragraph(
        'В ходе выполнения проекта были реализованы основные функции интернет-магазина: каталог товаров, корзина, система заказов, личный кабинет пользователя и административная панель.'
    )
    doc.add_paragraph(
        'Актуальность выбранной темы обусловлена растущим спросом на онлайн-торговлю и необходимостью создания эффективных и удобных платформ для продажи товаров. '
        'Современное состояние рынка показывает, что интернет-магазины становятся неотъемлемой частью бизнеса, что делает разработку таких систем особенно важной.'
    )
    doc.add_paragraph(
        'Введение также включает краткую характеристику области применения, обоснование актуальности выбранной темы и описание современного состояния систем на рынке.'
    )
    doc.add_page_break()

    # 1. Описание проекта
    doc.add_heading('1. Описание проекта', level=1)
    doc.add_paragraph(
        'Проект представляет собой интернет-магазин, позволяющий пользователям просматривать каталог товаров, добавлять их в корзину, оформлять заказы и управлять своими заказами через личный кабинет. '
        'Для администраторов реализована отдельная панель управления товарами, категориями и заказами.'
    )
    doc.add_paragraph(
        'В рамках проекта были изучены различные аспекты разработки веб-приложений, включая работу с базами данных, создание пользовательского интерфейса и обеспечение безопасности.'
    )
    doc.add_page_break()

    # 2. Архитектура и структура проекта
    doc.add_heading('2. Архитектура и структура проекта', level=1)
    doc.add_paragraph(
        'Проект построен на фреймворке Django и состоит из двух основных модулей: '
        'основного модуля shop (настройки, маршруты, конфигурация) и приложения store (модели, представления, формы, шаблоны). '
        'Для хранения данных используется база данных SQLite3. Для загрузки тестовых данных предусмотрен отдельный скрипт.'
    )
    doc.add_paragraph('Структура проекта:')
    doc.add_paragraph(
        'internet-shop/\n'
        '├── manage.py              # Скрипт управления Django\n'
        '├── requirements.txt       # Зависимости проекта\n'
        '├── create_test_data.py    # Скрипт для создания тестовых данных\n'
        '├── shop/                  # Основной модуль проекта\n'
        '│   ├── settings.py        # Настройки проекта\n'
        '│   ├── urls.py           # Основные URL-маршруты\n'
        '│   ├── wsgi.py           # WSGI-конфигурация\n'
        '│   └── asgi.py           # ASGI-конфигурация\n'
        '└── store/                # Приложение магазина\n'
        '    ├── models.py         # Модели данных\n'
        '    ├── views.py          # Представления\n'
        '    ├── urls.py           # URL-маршруты приложения\n'
        '    ├── forms.py          # Формы\n'
        '    ├── cart.py           # Класс корзины\n'
        '    └── templates/        # Шаблоны\n'
        '        └── store/\n'
        '            ├── base.html\n'
        '            ├── product/\n'
        '            ├── cart/\n'
        '            └── order/'
    )
    doc.add_page_break()

    # 3. Используемые технологии
    doc.add_heading('3. Используемые технологии', level=1)
    doc.add_paragraph(
        '- Python 3.13\n'
        '- Django 5.0.2\n'
        '- SQLite3\n'
        '- Bootstrap 5\n'
        '- Crispy Forms\n'
        '- Pillow (для работы с изображениями)'
    )
    doc.add_paragraph(
        'Выбор технологий был обусловлен их популярностью, надежностью и широкой поддержкой сообщества. '
        'Django предоставляет мощные инструменты для разработки веб-приложений, а Bootstrap обеспечивает современный и отзывчивый дизайн.'
    )
    doc.add_page_break()

    # 4. Основные функции
    doc.add_heading('4. Основные функции', level=1)
    doc.add_paragraph('Каталог товаров: отображение, поиск, фильтрация по цене, детальная информация.')
    doc.add_paragraph('Корзина покупок: добавление, изменение количества, удаление товаров, подсчет стоимости.')
    doc.add_paragraph('Система заказов: оформление, история заказов, автоматическое списание товаров со склада.')
    doc.add_paragraph('Личный кабинет: просмотр истории заказов, редактирование профиля.')
    doc.add_paragraph('Административная панель: управление товарами, категориями, заказами и пользователями.')
    doc.add_page_break()

    # 5. Установка и запуск
    doc.add_heading('5. Установка и запуск', level=1)
    doc.add_paragraph('1. Клонировать репозиторий и перейти в папку проекта.')
    doc.add_paragraph('2. Создать виртуальное окружение и установить зависимости из requirements.txt.')
    doc.add_paragraph('3. Применить миграции и создать суперпользователя.')
    doc.add_paragraph('4. Загрузить тестовые данные с помощью create_test_data.py.')
    doc.add_paragraph('5. Запустить сервер разработки командой python manage.py runserver.')
    doc.add_paragraph('6. Открыть http://localhost:8000 в браузере.')
    doc.add_page_break()

    # 6. Заключение
    doc.add_heading('6. Заключение', level=1)
    doc.add_paragraph(
        'В ходе выполнения курсового проекта были закреплены знания по разработке серверных веб-приложений на Django. '
        'Реализованы все основные функции интернет-магазина, что позволяет использовать данный проект как основу для дальнейшего развития и внедрения новых возможностей.'
    )
    doc.add_paragraph(
        'Заключение также подводит итоги работы, обобщает ход решения и делает вывод о достижении поставленных целей.'
    )
    doc.add_page_break()

    # 7. Список использованных источников
    doc.add_heading('7. Список использованных источников', level=1)
    doc.add_paragraph('[1] Официальная документация Django: https://docs.djangoproject.com/ru/5.0/')
    doc.add_paragraph('[2] Bootstrap: https://getbootstrap.com/')
    doc.add_paragraph('[3] Документация Python: https://docs.python.org/3/')
    doc.add_paragraph('[4] Примеры кода и статьи с сайта https://habr.com/')
    doc.add_page_break()

    # 8. Теоретическая часть
    doc.add_heading('8. Теоретическая часть', level=1)
    doc.add_heading('8.1. История и развитие интернет-магазинов', level=2)
    doc.add_paragraph(
        'Первые интернет-магазины появились в середине 1990-х годов, с развитием глобальной сети Интернет. '
        'Одним из первых и наиболее успешных проектов стал Amazon, основанный Джеффом Безосом в 1994 году. '
        'Изначально он предлагал только книги, но позже ассортимент расширился до миллионов товаров, включая электронику, одежду, товары для дома и многое другое.'
    )
    doc.add_paragraph(
        'Параллельно с Amazon активно развивался eBay, ориентированный на продажи между пользователями и аукционную модель. '
        'Эти компании стали флагманами нового направления — электронной коммерции.'
    )
    doc.add_paragraph(
        'С начала 2000-х годов интернет-торговля начала стремительно развиваться. '
        'Появление более надёжных платёжных систем (например, PayPal), широкое распространение Интернета и развитие логистических сетей сыграли ключевую роль в этом процессе. '
        'Постепенно электронная коммерция проникла в жизнь каждого человека, изменив не только модель покупок, но и общее представление о торговле.'
    )
    doc.add_paragraph(
        'Сегодня интернет-магазины представляют собой высокотехнологичные платформы, способные обрабатывать миллионы заказов ежедневно, обеспечивать персонализированные рекомендации, анализировать поведение пользователей и интегрироваться с социальными сетями, рекламными системами и маркетинговыми платформами.'
    )
    doc.add_page_break()

    # 8.2. Сравнение онлайн и оффлайн торговли
    doc.add_heading('8.2. Сравнение онлайн и оффлайн торговли', level=2)
    table = doc.add_table(rows=1, cols=3)
    table.style = 'Table Grid'
    table.rows[0].cells[0].text = 'Критерий'
    table.rows[0].cells[1].text = 'Онлайн-магазин'
    table.rows[0].cells[2].text = 'Оффлайн-магазин'
    criteria = [
        ('Доступность', '24/7, из любой точки мира', 'Зависит от времени работы и геолокации'),
        ('Ассортимент', 'Огромный, масштабируется за счёт складов', 'Ограничен площадью торгового зала'),
        ('Издержки', 'Ниже: нет аренды помещений, меньше персонала', 'Высокие: аренда, коммунальные, зарплаты'),
        ('Удобство', 'Быстрый поиск, фильтры, доставка на дом', 'Визуальный осмотр товара, живое общение'),
        ('Время покупки', 'Несколько кликов', 'Необходимо физически посетить магазин'),
        ('Обратная связь', 'Отзывы, рейтинги, чат-боты', 'Только личное обращение к продавцу')
    ]
    for criterion, online, offline in criteria:
        row = table.add_row()
        row.cells[0].text = criterion
        row.cells[1].text = online
        row.cells[2].text = offline
    doc.add_page_break()

    # 8.3. Архитектура клиент-серверных приложений
    doc.add_heading('8.3. Архитектура клиент-серверных приложений', level=2)
    doc.add_paragraph(
        'Современные интернет-магазины работают по архитектуре «клиент-сервер». '
        'Клиентская часть — это интерфейс, с которым взаимодействует пользователь (например, веб-страница в браузере), а серверная часть — это логика, обрабатывающая запросы и взаимодействующая с базой данных.'
    )
    doc.add_paragraph('Основные компоненты:')
    doc.add_paragraph('- Клиент — браузер пользователя, отображает интерфейс.')
    doc.add_paragraph('- Сервер — приложение на Django, обрабатывает запросы, управляет логикой.')
    doc.add_paragraph('- База данных — хранит информацию о пользователях, товарах, заказах.')
    doc.add_paragraph('Типичный процесс:')
    doc.add_paragraph('1. Пользователь отправляет запрос (например, открыть страницу товара).')
    doc.add_paragraph('2. Сервер обрабатывает запрос, получает данные из базы.')
    doc.add_paragraph('3. Возвращает HTML-страницу или JSON-ответ.')
    doc.add_paragraph('4. Браузер отображает результат пользователю.')
    doc.add_paragraph('Такой подход обеспечивает масштабируемость и позволяет отделить логику от интерфейса, а также реализовывать разные клиенты: веб, мобильные приложения и т.д.')
    doc.add_page_break()

    # 8.4. Безопасность и защита данных в интернет-магазинах
    doc.add_heading('8.4. Безопасность и защита данных в интернет-магазинах', level=2)
    doc.add_paragraph(
        'При разработке интернет-магазинов безопасность — критически важный аспект. '
        'Особенно это касается личных данных пользователей, паролей, истории заказов и, при необходимости, платёжной информации.'
    )
    doc.add_paragraph('Основные меры защиты:')
    doc.add_paragraph('- Хэширование паролей (в Django используется PBKDF2).')
    doc.add_paragraph('- CSRF-защита — предотвращение подделки межсайтовых запросов.')
    doc.add_paragraph('- Валидация данных — фильтрация и проверка пользовательского ввода.')
    doc.add_paragraph('- Ограничение прав доступа — разграничение прав между пользователями и администраторами.')
    doc.add_paragraph('- Регулярные обновления — использование актуальных версий фреймворков и библиотек.')
    doc.add_paragraph('Также важно настроить безопасное хранение сессий, работу по HTTPS и использовать современные методы аутентификации.')
    doc.add_page_break()

    # 8.5. Обзор платформ и фреймворков
    doc.add_heading('8.5. Обзор платформ и фреймворков', level=2)
    table = doc.add_table(rows=1, cols=4)
    table.style = 'Table Grid'
    table.rows[0].cells[0].text = 'Платформа'
    table.rows[0].cells[1].text = 'Язык'
    table.rows[0].cells[2].text = 'Преимущества'
    table.rows[0].cells[3].text = 'Недостатки'
    platforms = [
        ('Django', 'Python', 'Безопасность, структура, масштабируемость', 'Требует навыков программирования'),
        ('Flask', 'Python', 'Простота, гибкость', 'Нет встроенной ORM, требует ручной сборки'),
        ('Laravel', 'PHP', 'Мощный функционал из коробки', 'Сложность при масштабировании'),
        ('Shopify', 'SaaS-платформа', 'Быстрый запуск, нет необходимости в коде', 'Ограниченная кастомизация, платный'),
        ('WordPress + WooCommerce', 'PHP', 'Простота, расширения', 'Неудобна для крупных магазинов')
    ]
    for platform, language, pros, cons in platforms:
        row = table.add_row()
        row.cells[0].text = platform
        row.cells[1].text = language
        row.cells[2].text = pros
        row.cells[3].text = cons
    doc.add_paragraph('Django — оптимальный выбор для кастомных решений, где важна гибкость, безопасность и расширяемость.')
    doc.add_page_break()

    # 8.6. Юзабилити и проектирование интерфейсов
    doc.add_heading('8.6. Юзабилити и проектирование интерфейсов', level=2)
    doc.add_paragraph(
        'Удобный интерфейс — ключевой фактор успеха интернет-магазина. '
        'Пользователь должен легко находить нужные товары, оформлять заказ и управлять своим профилем.'
    )
    doc.add_paragraph('Принципы хорошего юзабилити:')
    doc.add_paragraph('- Простая навигация: меню, хлебные крошки, фильтры.')
    doc.add_paragraph('- Поиск и сортировка: по цене, названию, категории.')
    doc.add_paragraph('- Адаптивность: интерфейс одинаково удобен на ПК и телефоне.')
    doc.add_paragraph('- Обратная связь: уведомления, всплывающие подсказки.')
    doc.add_paragraph('- Минимализм: ничего лишнего, только важные действия.')
    doc.add_paragraph('Bootstrap 5, использованный в проекте, помогает быстро создавать адаптивный и современный интерфейс, следуя этим принципам.')
    doc.add_page_break()

    # 9. Тестирование функциональности интернет-магазина
    doc.add_heading('9. Тестирование функциональности интернет-магазина', level=1)
    doc.add_heading('9.1. Виды тестирования', level=2)
    doc.add_paragraph(
        'Тестирование проекта проводилось вручную, а также с использованием встроенных возможностей Django.'
    )
    doc.add_paragraph('Основные виды тестирования:')
    doc.add_paragraph('- Функциональное — проверка корректности работы корзины, заказов, каталога.')
    doc.add_paragraph('- Интерфейсное — проверка отображения страниц на разных устройствах.')
    doc.add_paragraph('- Регрессионное — проверка стабильности после внесения изменений.')
    doc.add_paragraph('- Тестирование безопасности — базовая проверка CSRF, защиты от SQL-инъекций и XSS.')
    doc.add_page_break()

    # 9.2. Примеры проверок
    doc.add_heading('9.2. Примеры проверок', level=2)
    table = doc.add_table(rows=1, cols=3)
    table.style = 'Table Grid'
    table.rows[0].cells[0].text = 'Проверяемый элемент'
    table.rows[0].cells[1].text = 'Ожидаемый результат'
    table.rows[0].cells[2].text = 'Статус'
    checks = [
        ('Добавление товара в корзину', 'Товар появляется в корзине, цена пересчитывается', '✅ Пройдено'),
        ('Удаление товара', 'Товар удаляется, корзина обновляется', '✅ Пройдено'),
        ('Оформление заказа', 'Создаётся запись в базе, отображается в «Мои заказы»', '✅ Пройдено'),
        ('Авторизация', 'Переход к личному кабинету возможен только после входа', '✅ Пройдено'),
        ('Админ-панель', 'Доступна только суперпользователю', '✅ Пройдено')
    ]
    for element, result, status in checks:
        row = table.add_row()
        row.cells[0].text = element
        row.cells[1].text = result
        row.cells[2].text = status
    doc.add_page_break()

    # 10. Примеры кода
    doc.add_heading('10. Примеры кода', level=1)
    doc.add_heading('10.1. Модель товара', level=2)
    doc.add_paragraph('```python\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    image = models.ImageField(upload_to=\'products/\')\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.name\n```')
    doc.add_paragraph('Пояснение: Модель Product описывает структуру товара: название, описание, цена, изображение и категория. Django автоматически создаёт таблицу в БД и обеспечивает взаимодействие с ней.')
    doc.add_page_break()

    # 10.2. Представление каталога
    doc.add_heading('10.2. Представление каталога', level=2)
    doc.add_paragraph('```python\ndef product_list(request):\n    products = Product.objects.all()\n    return render(request, \'store/product/list.html\', {\'products\': products})\n```')
    doc.add_paragraph('Пояснение: Функция product_list получает список всех товаров из базы данных и передаёт их в шаблон для отображения. Это простейшее представление (view) в Django.')
    doc.add_page_break()

    # 11. Структура базы данных
    doc.add_heading('11. Структура базы данных', level=1)
    
    # Добавляем описание ERD-диаграммы
    doc.add_paragraph(
        'ERD (Entity-Relationship Diagram) - это визуальное представление структуры базы данных, '
        'которое показывает взаимосвязи между различными сущностями (таблицами) в системе. '
        'В нашем проекте используется реляционная база данных SQLite3, которая состоит из следующих основных таблиц:'
    )
    
    # Добавляем таблицу с описанием структуры
    table = doc.add_table(rows=1, cols=2)
    table.style = 'Table Grid'
    table.rows[0].cells[0].text = 'Таблица'
    table.rows[0].cells[1].text = 'Поля'
    tables = [
        ('User', 'id, username, password, email, first_name, last_name'),
        ('Category', 'id, name'),
        ('Product', 'id, name, description, price, image, category_id (внешний ключ)'),
        ('Order', 'id, user_id (внешний ключ), created_at, status'),
        ('OrderItem', 'id, order_id (внешний ключ), product_id (внешний ключ), quantity, price')
    ]
    for table_name, fields in tables:
        row = table.add_row()
        row.cells[0].text = table_name
        row.cells[1].text = fields
    
    doc.add_paragraph('🔐 В таблице User используются встроенные возможности Django (AbstractUser).')
    
    # Добавляем описание связей между таблицами
    doc.add_paragraph('\nСвязи между таблицами:')
    doc.add_paragraph('• Product связан с Category через внешний ключ category_id (отношение "многие к одному")')
    doc.add_paragraph('• Order связан с User через внешний ключ user_id (отношение "многие к одному")')
    doc.add_paragraph('• OrderItem связан с Order и Product через внешние ключи (отношение "многие к одному")')
    
    # Добавляем описание ERD-диаграммы
    doc.add_paragraph('\nERD-диаграмма:')
    doc.add_paragraph('В приложении представлена ERD-диаграмма (рисунок 1), которая наглядно показывает:')
    doc.add_paragraph('• Все таблицы базы данных и их поля')
    doc.add_paragraph('• Связи между таблицами (один-ко-многим, многие-ко-многим)')
    doc.add_paragraph('• Первичные и внешние ключи')
    doc.add_paragraph('• Типы данных полей')
    
    # Добавляем изображение ERD-диаграммы
    doc.add_picture('screenshots/erd_db.png', width=Inches(6))
    # Получаем последний параграф (подпись к рисунку)
    last_paragraph = doc.paragraphs[-1]
    last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
    # Добавляем подпись к рисунку
    caption = doc.add_paragraph()
    caption.alignment = WD_ALIGN_PARAGRAPH.CENTER
    caption.add_run('Рисунок 1 - ERD-диаграмма базы данных интернет-магазина').bold = True
    
    doc.add_paragraph('\nДиаграмма помогает лучше понять структуру базы данных и взаимосвязи между различными сущностями в системе.')
    doc.add_page_break()

    # Приложения
    doc.add_heading('Приложения', level=1)
    doc.add_paragraph('В данном разделе представлены скриншоты основных элементов интернет-магазина, демонстрирующие его функциональность и интерфейс.')
    
    # Функция для безопасного добавления изображения
    def add_image_safely(doc, image_path, description):
        try:
            doc.add_picture(image_path, width=Inches(6))
            last_paragraph = doc.paragraphs[-1]
            last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph(description)
            return True
        except FileNotFoundError:
            doc.add_paragraph(f'[Изображение отсутствует: {image_path}]')
            doc.add_paragraph(description)
            return False
    
    # Главная страница
    doc.add_heading('Рисунок 1 - Главная страница интернет-магазина', level=2)
    add_image_safely(doc, 'screenshots/main_page.png', 'На главной странице отображается каталог товаров, навигационное меню и основные элементы интерфейса.')
    doc.add_page_break()

    # Страница товара
    doc.add_heading('Рисунок 2 - Страница товара', level=2)
    add_image_safely(doc, 'screenshots/tovar_page.png', 'Детальная информация о товаре, включая описание, цену и кнопку добавления в корзину.')
    doc.add_page_break()

    # Корзина
    doc.add_heading('Рисунок 3 - Корзина покупок', level=2)
    add_image_safely(doc, 'screenshots/cart.png', 'Страница корзины с списком выбранных товаров и возможностью изменения количества.')
    doc.add_page_break()

    # Пустая корзина
    doc.add_heading('Рисунок 4 - Пустая корзина', level=2)
    add_image_safely(doc, 'screenshots/empty_cart.png', 'Отображение пустой корзины с предложением перейти к каталогу товаров.')
    doc.add_page_break()

    # Оформление заказа
    doc.add_heading('Рисунок 5 - Оформление заказа', level=2)
    add_image_safely(doc, 'screenshots/order_from.png', 'Форма оформления заказа с полями для ввода данных покупателя.')
    doc.add_page_break()

    # Страница заказа
    doc.add_heading('Рисунок 6 - Страница заказа', level=2)
    add_image_safely(doc, 'screenshots/order_page.png', 'Страница с детальной информацией о конкретном заказе.')
    doc.add_page_break()

    # Страница заказов
    doc.add_heading('Рисунок 7 - Страница заказов', level=2)
    add_image_safely(doc, 'screenshots/orders_page.png', 'Страница со списком всех заказов пользователя.')
    doc.add_page_break()

    # ERD-диаграмма
    doc.add_heading('Рисунок 8 - ERD-диаграмма базы данных', level=2)
    add_image_safely(doc, 'screenshots/erd_db.png', 'Схема базы данных, показывающая структуру таблиц и связи между ними.')
    
    doc.save('Пояснительная_записка_интернет_магазин.docx')

if __name__ == "__main__":
    create_formatted_docx()
    create_project_docx() 